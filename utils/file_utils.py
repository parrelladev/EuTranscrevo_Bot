"""
üìÅ UTILIT√ÅRIOS PARA OPERA√á√ïES COM ARQUIVOS

Fun√ß√µes auxiliares para:
- Gera√ß√£o de nomes √∫nicos
- Limpeza de arquivos tempor√°rios
- Valida√ß√£o de arquivos
- Verifica√ß√£o de permiss√µes
- Cria√ß√£o de diret√≥rios

Autor: parrelladev
Vers√£o: 1.0.0
"""

import os
import time
import glob
import shutil
from config import AUDIO


def generate_unique_file_name(prefix=None, extension=''):
    """
    Gera um nome √∫nico para um arquivo.

    :param prefix: Prefixo do nome (opcional, usa config se None)
    :param extension: Extens√£o com ponto (ex: .mp3)
    :return: Nome do arquivo √∫nico
    """
    default_prefix = prefix or AUDIO['tempPrefix']
    timestamp = int(time.time() * 1000)
    return f"{default_prefix}_{timestamp}{extension}"


def clean_temp_files(directory=None, pattern='*'):
    """
    Limpa arquivos tempor√°rios de um diret√≥rio.

    :param directory: Caminho do diret√≥rio (usa config se None)
    :param pattern: Padr√£o de arquivos (ex: *.mp3)
    :return: Quantidade de arquivos deletados
    """
    target_dir = directory or os.path.join(os.getcwd(), AUDIO['tempDir'])
    deleted_count = 0

    if not os.path.exists(target_dir):
        return 0

    try:
        files = glob.glob(os.path.join(target_dir, pattern))
        for file_path in files:
            if os.path.isfile(file_path):
                os.remove(file_path)
                deleted_count += 1
                print(f"üóëÔ∏è Arquivo deletado: {file_path}")
        return deleted_count
    except Exception as e:
        print("‚ùå Erro ao limpar arquivos tempor√°rios:", e)
        return 0


def file_exists(file_path):
    """
    Verifica se o arquivo existe e √© leg√≠vel.

    :param file_path: Caminho completo
    :return: True se o arquivo existe e √© acess√≠vel
    """
    return os.path.isfile(file_path) and os.access(file_path, os.R_OK)


def get_file_size(file_path):
    """
    Retorna o tamanho de um arquivo.

    :param file_path: Caminho do arquivo
    :return: Tamanho em bytes
    :raises FileNotFoundError: se n√£o existir
    """
    if not file_exists(file_path):
        raise FileNotFoundError(f"Arquivo n√£o encontrado: {file_path}")
    return os.path.getsize(file_path)


def ensure_directory_exists(dir_path):
    """
    Cria o diret√≥rio, se n√£o existir.

    :param dir_path: Caminho do diret√≥rio
    :return: True se criado ou j√° existente
    """
    try:
        os.makedirs(dir_path, exist_ok=True)
        print(f"üìÅ Diret√≥rio criado/confirmado: {dir_path}")
        return True
    except Exception as e:
        print("‚ùå Erro ao criar diret√≥rio:", e)
        return False
